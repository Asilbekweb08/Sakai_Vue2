<script setup>
import { filter_finish_point_location, filter_finish_point_search, filter_finish_point_suggestions, filter_start_point_location, filter_start_point_search, filter_start_point_suggestions } from '@/service/FromToService';
import { NodeService } from '@/service/NodeService';
import axios from 'axios';
import Column from 'primevue/column';
import DataTable from 'primevue/datatable';
import Dialog from 'primevue/dialog';
import { onMounted, ref } from 'vue';
import * as ol from 'ol';
import 'ol/ol.css';
import { Style, Icon } from 'ol/style';  
import GeoJSON from 'ol/format/GeoJSON';
import { Map, View } from 'ol';
import TileLayer from 'ol/layer/Tile';
import OSM from 'ol/source/OSM';
import { fromLonLat, toLonLat } from 'ol/proj';
import { Feature } from 'ol';
import Point from 'ol/geom/Point';
import VectorLayer from 'ol/layer/Vector';
import VectorSource from 'ol/source/Vector';
import * as olStyle from 'ol/style';

// **GLOBAL O'ZGARUVCHILAR**
const vectorSource = ref(null);  // **vectorSource global o'zgaruvchi**
const map = ref(null);  // **map global o'zgaruvchi**
const userCoordinates = ref([0, 0]);  // Foydalanuvchining geografik koordinatalari

const host = 'http://127.0.0.1';
const calendarValue = ref(null);
const selectedTypeBodyNodes = ref(null);
const selectedTypeBodyNode = ref(null);
const selectADRs = ref(null);
const selectADR = ref(null);
const cargos = ref([]);
const visible = ref(false);
const cargoView = ref(null);

onMounted(() => {
    NodeService.getTypeBodyNodes().then((data) => (selectedTypeBodyNodes.value = data));
    NodeService.getADRNodes().then((data) => (selectADRs.value = data));

    // **Geolokatsiyani olish**
    if (navigator.geolocation) {
        navigator.geolocation.getCurrentPosition(
            (position) => {
                userCoordinates.value = [
                    position.coords.longitude,
                    position.coords.latitude
                ];
                console.log("User Coordinates:", userCoordinates.value);
                initializeMap(userCoordinates.value);  // Xarita boshlanishi
            },
            (error) => {
                console.error("Error getting geolocation:", error);
            }
        );
    } else {
        console.error("Geolocation is not supported by this browser.");
    }
});

// **XARITA BOSHLASH FUNKSIYASI**
function initializeMap(coordinates) {
    if (!coordinates) return;

    vectorSource.value = new VectorSource(); // vectorSource qayta aniqlanadi
    map.value = new Map({
        target: 'mapContainer',
        layers: [
            new TileLayer({
                source: new OSM(),
            }),
            new VectorLayer({
                source: vectorSource.value,  // **vectorSource qo‘shildi**
            }),
        ],
        view: new View({
            center: fromLonLat(coordinates),
            zoom: 10,
        }),
    });

    loadGeoJSON(vectorSource.value, map.value);  // GeoJSON'ni yuklash
}

// **Reverse geocoding the coordinates**
function reverseGeocode(coordinates) {
    axios
        .get(`https://nominatim.openstreetmap.org/reverse?format=json&lat=${coordinates[1]}&lon=${coordinates[0]}`)
        .then((response) => {
            if (response.data && response.data.display_name) {
                filter_start_point_location.value = response.data.display_name;
            }
        })
        .catch((error) => {
            console.error("Error getting address:", error);
        });
}

// **Formani jo'natish funksiya**
function submitForm(event) {
    let form = {
        filter_start_point_location: filter_start_point_location.value,
        filter_finish_point_location: filter_finish_point_location.value,
        selectedTypeBodyNode: selectedTypeBodyNode.value,
        calendarValue: calendarValue.value,
        selectADR: selectADR.value,
        user_coordinates: userCoordinates.value,
    };

    console.log('Form ma\'lumotlari:', JSON.stringify(form));

    const headers = {
        'Content-Type': 'application/json',
        'Access-Control-Allow-Origin': '*',
    };

    axios
        .post("/public/demo/data/geo.json", JSON.stringify(form), { headers })
        .then(function (response) {
            console.log(response.data);
            cargos.value = [];
            cargos.value = response.data;

            // **GeoJSON'dan yangi ma'lumotlarni yuklash va xaritani yangilash**
            loadGeoJSON(vectorSource.value, map.value);
        })
        .catch(function (error) {
            console.log(error);
        });
}

// **GeoJSON yuklash**
function loadGeoJSON(vectorSource, map) {
    if (!vectorSource || !map) {
        console.error("vectorSource yoki map mavjud emas!");
        return;
    }

    axios.get('/public/demo/data/geo.json')
        .then(response => {
            if (response.data && response.data.type === "FeatureCollection" && Array.isArray(response.data.features)) {
                console.log("GeoJSON yuklandi:", response.data.features);

                // Eski markerlarni tozalash
                vectorSource.clear();

                const geojsonFormat = new GeoJSON();
                const features = geojsonFormat.readFeatures(response.data, {
                    featureProjection: 'EPSG:3857'  // Xarita proyeksiyasiga moslashtirish
                });

                features.forEach(feature => {
                    feature.setStyle(new Style({
                        image: new Icon({
                            src: '/marker.svg', // Marker rasmi
                            scale: 0.04,
                        }),
                    }));
                    vectorSource.addFeature(feature); // Yangi markerlarni qo‘shish
                });

                console.log("GeoJSON yangilandi, markerlar xaritaga qo‘shildi:", features);

                // Xarita markazini va zoom darajasini moslashtirish
                const allCoordinates = features.map(f => f.getGeometry().getCoordinates());
                if (allCoordinates.length > 0) {
                    const extent = ol.extent.boundingExtent(allCoordinates);
                    map.getView().fit(extent, { padding: [50, 50, 50, 50], maxZoom: 15 });
                }
            } else {
                console.error("Xatolik: Kutilgan format noto‘g‘ri yoki features yo‘q!", response.data);
            }
        })
        .catch(error => {
            console.error("Error loading GeoJSON:", error);
        });
}
</script>